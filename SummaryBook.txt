Часть первая. Глава 1.

В начале июля, в жаркое время, молодой человек вышел из своей каморки на улицу и медленно отправился к К-ну мосту. Он благополучно избежал встречи с хозяйкой на лестнице. Каморка его походила более на шкаф, чем на квартиру. Он был должен хозяйке и боялся встретиться с ней.

В последнее время он был в раздражительном и напряженном состоянии, похожем на ипохондрию. Он был задавлен бедностью, но даже стесненное положение перестало тяготить его. Он не хотел заниматься насущными делами и боялся любых встреч.

Выходя на улицу, он чувствовал страх встречи с хозяйкой. "На какое дело хочу покуситься и в то же время каких пустяков боюсь! - подумал он. - Гм... да... все в руках человека, и все-то он мимо носу проносит единственно от одной трусости...".

Он пошел по улице, не замечая окружающего, погруженный в свои мысли. Жара, духота, толкотня и вонь из распивочных неприятно повлияли на его нервы. Он был хорош собою, но сильно измучен своими мыслями и голодом.
В жаркое июльское утро молодой человек.quit из своей каморки на улицу, направившись к К-ну мосту. Он старался избежать встречи с хозяйкой, которая могла потребовать уплаты долга. Молодой человек был беден, и его самого состояние отражалось на его настроении. Он был распылен, и его мысли были перепутаны. Он боялся встречи с хозяйкой, а также с другими людьми, потому что не знал, как они отреагируют на его долги.

Выходя на улицу, он почувствовал жару и духоту. Он был одет в лохмотья и стыдился своей нищеты. Он дошел до дома, где жил старик, и подумал, что должен быть как можно менее приметным. Он вошел в дом и позвонил в старушиной квартиру. Старуха открыла дверь и оглядела его с недоверием. Она была мала и сухая, с злыми глазками и маленьким носом. Она кашляла и кряхтела. Молодой человек взглянул на нее своим особенным взглядом, и в ее глазах мелькнула недоверчивость.
Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 6029. Please try again in 290ms. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 6029. Please try again in 290ms. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882460944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882460608">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882460384">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882460496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882460720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882460832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882461392">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882460160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882461056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882461504">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882461728">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1003</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>except httpx.HTTPStatusError as err:  # thrown on 4xx and 5xx status code</pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Encountered httpx.HTTPStatusError&#34;, exc_info=True)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if retries &gt; 0 and self._should_retry(err.response):</pre>
<pre class="line before"><span class="ws">                </span>err.response.close()</pre>
<pre class="line current"><span class="ws">                </span>return self._retry_request(</pre>
<pre class="line after"><span class="ws">                    </span>options,</pre>
<pre class="line after"><span class="ws">                    </span>cast_to,</pre>
<pre class="line after"><span class="ws">                    </span>retries,</pre>
<pre class="line after"><span class="ws">                    </span>err.response.headers,</pre>
<pre class="line after"><span class="ws">                    </span>stream=stream,</pre></div>
</div>

<li><div class="frame" id="frame-140695882461168">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1051</em>,
      in <code class="function">_retry_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># In a synchronous context we are blocking the entire thread. Up to the library user to run the client in a</pre>
<pre class="line before"><span class="ws">        </span># different thread if necessary.</pre>
<pre class="line before"><span class="ws">        </span>time.sleep(timeout)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre></div>
</div>

<li><div class="frame" id="frame-140695882461616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1003</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>except httpx.HTTPStatusError as err:  # thrown on 4xx and 5xx status code</pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Encountered httpx.HTTPStatusError&#34;, exc_info=True)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if retries &gt; 0 and self._should_retry(err.response):</pre>
<pre class="line before"><span class="ws">                </span>err.response.close()</pre>
<pre class="line current"><span class="ws">                </span>return self._retry_request(</pre>
<pre class="line after"><span class="ws">                    </span>options,</pre>
<pre class="line after"><span class="ws">                    </span>cast_to,</pre>
<pre class="line after"><span class="ws">                    </span>retries,</pre>
<pre class="line after"><span class="ws">                    </span>err.response.headers,</pre>
<pre class="line after"><span class="ws">                    </span>stream=stream,</pre></div>
</div>

<li><div class="frame" id="frame-140695882461840">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1051</em>,
      in <code class="function">_retry_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># In a synchronous context we are blocking the entire thread. Up to the library user to run the client in a</pre>
<pre class="line before"><span class="ws">        </span># different thread if necessary.</pre>
<pre class="line before"><span class="ws">        </span>time.sleep(timeout)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre></div>
</div>

<li><div class="frame" id="frame-140695882461952">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 6029. Please try again in 290ms. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1003, in _request
    return self._retry_request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1051, in _retry_request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1003, in _request
    return self._retry_request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1051, in _retry_request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 6029. Please try again in 290ms. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1003, in _request
    return self._retry_request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1051, in _retry_request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1003, in _request
    return self._retry_request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1051, in _retry_request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 6029. Please try again in 290ms. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 7760. Please try again in 17.6s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 7760. Please try again in 17.6s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882462288">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882463296">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882462624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882462960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882463072">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882463184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882463744">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882463632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882463408">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882463520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882463856">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1003</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>except httpx.HTTPStatusError as err:  # thrown on 4xx and 5xx status code</pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Encountered httpx.HTTPStatusError&#34;, exc_info=True)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if retries &gt; 0 and self._should_retry(err.response):</pre>
<pre class="line before"><span class="ws">                </span>err.response.close()</pre>
<pre class="line current"><span class="ws">                </span>return self._retry_request(</pre>
<pre class="line after"><span class="ws">                    </span>options,</pre>
<pre class="line after"><span class="ws">                    </span>cast_to,</pre>
<pre class="line after"><span class="ws">                    </span>retries,</pre>
<pre class="line after"><span class="ws">                    </span>err.response.headers,</pre>
<pre class="line after"><span class="ws">                    </span>stream=stream,</pre></div>
</div>

<li><div class="frame" id="frame-140695882463968">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1051</em>,
      in <code class="function">_retry_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># In a synchronous context we are blocking the entire thread. Up to the library user to run the client in a</pre>
<pre class="line before"><span class="ws">        </span># different thread if necessary.</pre>
<pre class="line before"><span class="ws">        </span>time.sleep(timeout)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre></div>
</div>

<li><div class="frame" id="frame-140695882464080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1003</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>except httpx.HTTPStatusError as err:  # thrown on 4xx and 5xx status code</pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Encountered httpx.HTTPStatusError&#34;, exc_info=True)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if retries &gt; 0 and self._should_retry(err.response):</pre>
<pre class="line before"><span class="ws">                </span>err.response.close()</pre>
<pre class="line current"><span class="ws">                </span>return self._retry_request(</pre>
<pre class="line after"><span class="ws">                    </span>options,</pre>
<pre class="line after"><span class="ws">                    </span>cast_to,</pre>
<pre class="line after"><span class="ws">                    </span>retries,</pre>
<pre class="line after"><span class="ws">                    </span>err.response.headers,</pre>
<pre class="line after"><span class="ws">                    </span>stream=stream,</pre></div>
</div>

<li><div class="frame" id="frame-140695882464192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1051</em>,
      in <code class="function">_retry_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># In a synchronous context we are blocking the entire thread. Up to the library user to run the client in a</pre>
<pre class="line before"><span class="ws">        </span># different thread if necessary.</pre>
<pre class="line before"><span class="ws">        </span>time.sleep(timeout)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre></div>
</div>

<li><div class="frame" id="frame-140695882464304">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 7760. Please try again in 17.6s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1003, in _request
    return self._retry_request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1051, in _retry_request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1003, in _request
    return self._retry_request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1051, in _retry_request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 7760. Please try again in 17.6s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1003, in _request
    return self._retry_request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1051, in _retry_request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1003, in _request
    return self._retry_request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1051, in _retry_request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 7760. Please try again in 17.6s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 9441. Please try again in 34.41s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 9441. Please try again in 34.41s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882645680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882646016">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882646128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882645904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882646352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882646240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882646576">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882646912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882646464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882646688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882646800">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1003</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>except httpx.HTTPStatusError as err:  # thrown on 4xx and 5xx status code</pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Encountered httpx.HTTPStatusError&#34;, exc_info=True)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if retries &gt; 0 and self._should_retry(err.response):</pre>
<pre class="line before"><span class="ws">                </span>err.response.close()</pre>
<pre class="line current"><span class="ws">                </span>return self._retry_request(</pre>
<pre class="line after"><span class="ws">                    </span>options,</pre>
<pre class="line after"><span class="ws">                    </span>cast_to,</pre>
<pre class="line after"><span class="ws">                    </span>retries,</pre>
<pre class="line after"><span class="ws">                    </span>err.response.headers,</pre>
<pre class="line after"><span class="ws">                    </span>stream=stream,</pre></div>
</div>

<li><div class="frame" id="frame-140695882647024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1051</em>,
      in <code class="function">_retry_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># In a synchronous context we are blocking the entire thread. Up to the library user to run the client in a</pre>
<pre class="line before"><span class="ws">        </span># different thread if necessary.</pre>
<pre class="line before"><span class="ws">        </span>time.sleep(timeout)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre></div>
</div>

<li><div class="frame" id="frame-140695882647136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1003</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>except httpx.HTTPStatusError as err:  # thrown on 4xx and 5xx status code</pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Encountered httpx.HTTPStatusError&#34;, exc_info=True)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if retries &gt; 0 and self._should_retry(err.response):</pre>
<pre class="line before"><span class="ws">                </span>err.response.close()</pre>
<pre class="line current"><span class="ws">                </span>return self._retry_request(</pre>
<pre class="line after"><span class="ws">                    </span>options,</pre>
<pre class="line after"><span class="ws">                    </span>cast_to,</pre>
<pre class="line after"><span class="ws">                    </span>retries,</pre>
<pre class="line after"><span class="ws">                    </span>err.response.headers,</pre>
<pre class="line after"><span class="ws">                    </span>stream=stream,</pre></div>
</div>

<li><div class="frame" id="frame-140695882647248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1051</em>,
      in <code class="function">_retry_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># In a synchronous context we are blocking the entire thread. Up to the library user to run the client in a</pre>
<pre class="line before"><span class="ws">        </span># different thread if necessary.</pre>
<pre class="line before"><span class="ws">        </span>time.sleep(timeout)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre></div>
</div>

<li><div class="frame" id="frame-140695882647360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 9441. Please try again in 34.41s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1003, in _request
    return self._retry_request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1051, in _retry_request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1003, in _request
    return self._retry_request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1051, in _retry_request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 9441. Please try again in 34.41s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1003, in _request
    return self._retry_request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1051, in _retry_request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1003, in _request
    return self._retry_request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1051, in _retry_request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 9441. Please try again in 34.41s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 11126. Please try again in 51.26s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 11126. Please try again in 51.26s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882647696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882649040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882648032">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882648592">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882648704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882649376">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882648928">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882649152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882649264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882649488">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882649600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1003</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>except httpx.HTTPStatusError as err:  # thrown on 4xx and 5xx status code</pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Encountered httpx.HTTPStatusError&#34;, exc_info=True)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if retries &gt; 0 and self._should_retry(err.response):</pre>
<pre class="line before"><span class="ws">                </span>err.response.close()</pre>
<pre class="line current"><span class="ws">                </span>return self._retry_request(</pre>
<pre class="line after"><span class="ws">                    </span>options,</pre>
<pre class="line after"><span class="ws">                    </span>cast_to,</pre>
<pre class="line after"><span class="ws">                    </span>retries,</pre>
<pre class="line after"><span class="ws">                    </span>err.response.headers,</pre>
<pre class="line after"><span class="ws">                    </span>stream=stream,</pre></div>
</div>

<li><div class="frame" id="frame-140695882649712">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1051</em>,
      in <code class="function">_retry_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># In a synchronous context we are blocking the entire thread. Up to the library user to run the client in a</pre>
<pre class="line before"><span class="ws">        </span># different thread if necessary.</pre>
<pre class="line before"><span class="ws">        </span>time.sleep(timeout)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre></div>
</div>

<li><div class="frame" id="frame-140695882649824">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1003</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>except httpx.HTTPStatusError as err:  # thrown on 4xx and 5xx status code</pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Encountered httpx.HTTPStatusError&#34;, exc_info=True)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if retries &gt; 0 and self._should_retry(err.response):</pre>
<pre class="line before"><span class="ws">                </span>err.response.close()</pre>
<pre class="line current"><span class="ws">                </span>return self._retry_request(</pre>
<pre class="line after"><span class="ws">                    </span>options,</pre>
<pre class="line after"><span class="ws">                    </span>cast_to,</pre>
<pre class="line after"><span class="ws">                    </span>retries,</pre>
<pre class="line after"><span class="ws">                    </span>err.response.headers,</pre>
<pre class="line after"><span class="ws">                    </span>stream=stream,</pre></div>
</div>

<li><div class="frame" id="frame-140695882649936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1051</em>,
      in <code class="function">_retry_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># In a synchronous context we are blocking the entire thread. Up to the library user to run the client in a</pre>
<pre class="line before"><span class="ws">        </span># different thread if necessary.</pre>
<pre class="line before"><span class="ws">        </span>time.sleep(timeout)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre></div>
</div>

<li><div class="frame" id="frame-140695882650048">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 11126. Please try again in 51.26s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1003, in _request
    return self._retry_request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1051, in _retry_request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1003, in _request
    return self._retry_request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1051, in _retry_request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 11126. Please try again in 51.26s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1003, in _request
    return self._retry_request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1051, in _retry_request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1003, in _request
    return self._retry_request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1051, in _retry_request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 11126. Please try again in 51.26s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 15823. Please try again in 1m38.23s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 15823. Please try again in 1m38.23s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882651168">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882650384">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882651056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882650720">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882651504">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882651392">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882651728">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882652064">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882651616">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882651840">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882651952">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 15823. Please try again in 1m38.23s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 15823. Please try again in 1m38.23s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 15823. Please try again in 1m38.23s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 18178. Please try again in 2m1.78s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 18178. Please try again in 2m1.78s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882652624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882652400">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882652512">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882652848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882653072">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882652960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882653296">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882653632">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882653184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882653408">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882653520">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 18178. Please try again in 2m1.78s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 18178. Please try again in 2m1.78s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 18178. Please try again in 2m1.78s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 20390. Please try again in 2m23.9s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 20390. Please try again in 2m23.9s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882654528">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882654192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882653968">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882654080">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882654416">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882654640">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882654752">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882654864">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882654976">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882655088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882655200">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 20390. Please try again in 2m23.9s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 20390. Please try again in 2m23.9s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 20390. Please try again in 2m23.9s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 22568. Please try again in 2m45.68s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 22568. Please try again in 2m45.68s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882655872">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882655536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882655760">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882655648">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882656096">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882656208">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882656320">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882656432">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882656544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882656656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882656768">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 22568. Please try again in 2m45.68s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 22568. Please try again in 2m45.68s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 22568. Please try again in 2m45.68s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 24527. Please try again in 3m5.27s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 24527. Please try again in 3m5.27s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882657440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882657104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882657328">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882657216">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882657664">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882657776">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882657888">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882658000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882658112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882658224">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882658336">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 24527. Please try again in 3m5.27s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 24527. Please try again in 3m5.27s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 24527. Please try again in 3m5.27s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 26352. Please try again in 3m23.52s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 26352. Please try again in 3m23.52s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882659008">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882658672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882658896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882658784">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882659232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882659344">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882659456">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882659568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882659680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882659792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882659904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 26352. Please try again in 3m23.52s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 26352. Please try again in 3m23.52s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 26352. Please try again in 3m23.52s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 32708. Please try again in 4m27.079999999s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 32708. Please try again in 4m27.079999999s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882660576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882660240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882660464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882660352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882660912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882660800">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882661136">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882661472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882661024">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882661248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882661360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 32708. Please try again in 4m27.079999999s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 32708. Please try again in 4m27.079999999s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 32708. Please try again in 4m27.079999999s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 35912. Please try again in 4m59.12s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 35912. Please try again in 4m59.12s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882957088">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882956976">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882957200">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882957312">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882957536">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882957424">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882957760">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882958096">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882957648">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882957872">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882957984">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 35912. Please try again in 4m59.12s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 35912. Please try again in 4m59.12s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 35912. Please try again in 4m59.12s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 38848. Please try again in 5m28.48s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 38848. Please try again in 5m28.48s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882958992">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882958656">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882958432">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882958544">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882958880">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882959104">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882959216">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882959328">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882959440">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882959552">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882959664">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 38848. Please try again in 5m28.48s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 38848. Please try again in 5m28.48s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 38848. Please try again in 5m28.48s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 40791. Please try again in 5m47.91s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 40791. Please try again in 5m47.91s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882960560">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882960224">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882960000">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882960112">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882960448">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882960672">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882960784">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882960896">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882961008">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882961120">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882961232">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 40791. Please try again in 5m47.91s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 40791. Please try again in 5m47.91s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 40791. Please try again in 5m47.91s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 42949. Please try again in 6m9.49s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 42949. Please try again in 6m9.49s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882961904">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882961568">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882961792">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882961680">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882962240">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882962128">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882962464">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882962800">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882962352">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882962576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882962688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 42949. Please try again in 6m9.49s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 42949. Please try again in 6m9.49s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 42949. Please try again in 6m9.49s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 44586. Please try again in 6m25.86s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 44586. Please try again in 6m25.86s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882963696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882963360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882963136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882963248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882963584">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882963808">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882963920">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882964032">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882964144">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882964256">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882964368">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 44586. Please try again in 6m25.86s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 44586. Please try again in 6m25.86s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 44586. Please try again in 6m25.86s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 46476. Please try again in 6m44.76s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>RateLimitError</h1>
<div class="detail">
  <p class="errormsg">groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 46476. Please try again in 6m44.76s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882965264">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882964928">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882964704">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882964816">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882965152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882965376">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882965488">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882965600">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882965712">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882965824">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882965936">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 46476. Please try again in 6m44.76s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {&#39;error&#39;: {&#39;message&#39;: &#39;Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 46476. Please try again in 6m44.76s. Visit https://console.groq.com/docs/rate-limits for more information.&#39;, &#39;type&#39;: &#39;tokens&#39;, &#39;code&#39;: &#39;rate_limit_exceeded&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01hz4xsx9seehsnj0yazertmhe` on tokens per minute (TPM): Limit 6000, Used 0, Requested 46476. Please try again in 6m44.76s. Visit https://console.groq.com/docs/rate-limits for more information.', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}


-->

Error: 500, <!doctype html>
<html lang=en>
  <head>
    <title>groq.APIStatusError: Error code: 413 - {&#39;error&#39;: {&#39;message&#39;: &#39;Request Entity Too Large&#39;, &#39;type&#39;: &#39;invalid_request_error&#39;, &#39;code&#39;: &#39;request_too_large&#39;}}
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "KI9XKjoO7z9OADqmiKlU";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>APIStatusError</h1>
<div class="detail">
  <p class="errormsg">groq.APIStatusError: Error code: 413 - {&#39;error&#39;: {&#39;message&#39;: &#39;Request Entity Too Large&#39;, &#39;type&#39;: &#39;invalid_request_error&#39;, &#39;code&#39;: &#39;request_too_large&#39;}}
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140695882966832">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140695882966496">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140695882966272">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140695882966384">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140695882966944">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140695882967056">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/flask/app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140695882967168">
  <h4>File <cite class="filename">"/root/gpt-proxy/raq-gpt.py"</cite>,
      line <em class="line">26</em>,
      in <code class="function">ask</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.json</pre>
<pre class="line before"><span class="ws">    </span>user_messages = data.get(&#39;messages&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if not user_messages:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;No message provided&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>chat_completion = client.chat.completions.create(</pre>
<pre class="line after"><span class="ws">        </span>messages=user_messages,</pre>
<pre class="line after"><span class="ws">        </span>model=&#34;llama3-70b-8192&#34;,</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>chat_response = chat_completion.choices[0].message.content</pre></div>
</div>

<li><div class="frame" id="frame-140695882967280">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">create</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>extra_body: Add additional JSON properties to the request</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">          </span>timeout: Override the client-level default timeout for this request, in seconds</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._post(</pre>
<pre class="line after"><span class="ws">            </span>&#34;/openai/v1/chat/completions&#34;,</pre>
<pre class="line after"><span class="ws">            </span>body=maybe_transform(</pre>
<pre class="line after"><span class="ws">                </span>{</pre>
<pre class="line after"><span class="ws">                    </span>&#34;messages&#34;: messages,</pre>
<pre class="line after"><span class="ws">                    </span>&#34;model&#34;: model,</pre></div>
</div>

<li><div class="frame" id="frame-140695882967392">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1225</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line before"><span class="ws">        </span>opts = FinalRequestOptions.construct(</pre>
<pre class="line before"><span class="ws">            </span>method=&#34;post&#34;, url=path, json_data=body, files=to_httpx_files(files), **options</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def patch(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>path: str,</pre>
<pre class="line after"><span class="ws">        </span>*,</pre></div>
</div>

<li><div class="frame" id="frame-140695882967728">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>remaining_retries: Optional[int] = None,</pre>
<pre class="line before"><span class="ws">        </span>*,</pre>
<pre class="line before"><span class="ws">        </span>stream: bool = False,</pre>
<pre class="line before"><span class="ws">        </span>stream_cls: type[_StreamT] | None = None,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; ResponseT | _StreamT:</pre>
<pre class="line current"><span class="ws">        </span>return self._request(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>stream=stream,</pre>
<pre class="line after"><span class="ws">            </span>stream_cls=stream_cls,</pre>
<pre class="line after"><span class="ws">            </span>remaining_retries=remaining_retries,</pre></div>
</div>

<li><div class="frame" id="frame-140695882967504">
  <h4>File <cite class="filename">"/usr/local/lib/python3.10/dist-packages/groq/_base_client.py"</cite>,
      line <em class="line">1018</em>,
      in <code class="function">_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># to completion before attempting to access the response text.</pre>
<pre class="line before"><span class="ws">            </span>if not err.response.is_closed:</pre>
<pre class="line before"><span class="ws">                </span>err.response.read()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>log.debug(&#34;Re-raising status error&#34;)</pre>
<pre class="line current"><span class="ws">            </span>raise self._make_status_error_from_response(err.response) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return self._process_response(</pre>
<pre class="line after"><span class="ws">            </span>cast_to=cast_to,</pre>
<pre class="line after"><span class="ws">            </span>options=options,</pre>
<pre class="line after"><span class="ws">            </span>response=response,</pre></div>
</div>
</ul>
  <blockquote>groq.APIStatusError: Error code: 413 - {&#39;error&#39;: {&#39;message&#39;: &#39;Request Entity Too Large&#39;, &#39;type&#39;: &#39;invalid_request_error&#39;, &#39;code&#39;: &#39;request_too_large&#39;}}
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.10/dist-packages/flask/app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/root/gpt-proxy/raq-gpt.py&#34;, line 26, in ask
    chat_completion = client.chat.completions.create(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py&#34;, line 283, in create
    return self._post(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 920, in request
    return self._request(
  File &#34;/usr/local/lib/python3.10/dist-packages/groq/_base_client.py&#34;, line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.APIStatusError: Error code: 413 - {&#39;error&#39;: {&#39;message&#39;: &#39;Request Entity Too Large&#39;, &#39;type&#39;: &#39;invalid_request_error&#39;, &#39;code&#39;: &#39;request_too_large&#39;}}
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.10/dist-packages/flask/app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/root/gpt-proxy/raq-gpt.py", line 26, in ask
    chat_completion = client.chat.completions.create(
  File "/usr/local/lib/python3.10/dist-packages/groq/resources/chat/completions.py", line 283, in create
    return self._post(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1225, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 920, in request
    return self._request(
  File "/usr/local/lib/python3.10/dist-packages/groq/_base_client.py", line 1018, in _request
    raise self._make_status_error_from_response(err.response) from None
groq.APIStatusError: Error code: 413 - {'error': {'message': 'Request Entity Too Large', 'type': 'invalid_request_error', 'code': 'request_too_large'}}


-->

